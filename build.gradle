buildscript {
    repositories {
        mavenCentral()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.3.0'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.6'
    }
}

final String SUPPORT_LIBS_VERSION = '26.0.0'

apply plugin: 'com.android.application'
apply plugin: 'com.google.protobuf'

android {
    compileSdkVersion 26
    buildToolsVersion '28.0.3'

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 26
        versionCode getSelfDefinedVersion("code")
        versionName getSelfDefinedVersion("name")

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {

        signing_platform {
            storeFile file("platform.keystore")
            storePassword 'android'
            keyAlias 'skyworth'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
            signingConfig signingConfigs.signing_platform
        }
        release {
            minifyEnabled false
            debuggable false
            signingConfig signingConfigs.signing_platform
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "AIoTLauncher_${variant.buildType.name}_${defaultConfig.versionName}.apk"
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "default"

    productFlavors {
        aosp {
            dimension "default"
            applicationId 'com.android.launcher'
            testApplicationId 'com.android.launcher3.tests'
        }

        l3go {
            dimension "default"
            applicationId 'com.android.launcher'
            testApplicationId 'com.android.launcher3.tests'
        }

        quickstep {
            dimension "default"
            applicationId 'com.android.launcher'
            testApplicationId 'com.android.launcher3.tests'
        }
    }

    // Disable release builds for now
    /*android.variantFilter { variant ->
        if (variant.buildType.name.endsWith('release')) {
            variant.setIgnore(true);
        }
    }*/

    sourceSets {
        main {
            res.srcDirs = ['res']
            java.srcDirs = ['src']
            manifest.srcFile 'AndroidManifest.xml'
            proto {
                srcDir 'protos/'
                srcDir 'proto_overrides/'
            }
        }

        debug {
            manifest.srcFile "AndroidManifest.xml"
        }

       androidTest {
            res.srcDirs = ['tests/res']
            java.srcDirs = ['tests/src']
            manifest.srcFile "tests/AndroidManifest-common.xml"
        }

        androidTestDebug {
            manifest.srcFile "tests/AndroidManifest.xml"
        }

        aosp {
            java.srcDirs = ['src_flags', "src_ui_overrides"]
        }

        l3go {
            res.srcDirs = ['go/res']
            java.srcDirs = ['go/src_flags', "src_ui_overrides"]
            manifest.srcFile "go/AndroidManifest.xml"
        }

        quickstep {
            res.srcDirs = ['quickstep/res']
            java.srcDirs = ['src_flags', 'quickstep/src']
            manifest.srcFile "quickstep/AndroidManifest.xml"
        }
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }

    android {
        lintOptions {
            checkReleaseBuilds false
            // Or, if you prefer, you can continue to check for errors in release builds,
            // but continue the build even when errors are found:
            abortOnError false
        }
    }
}

repositories {
    maven { url "../../../prebuilts/fullsdk-darwin/extras/android/m2repository" }
    maven { url "../../../prebuilts/fullsdk-linux/extras/android/m2repository" }
    mavenCentral()
    google()
    jcenter()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation "com.android.support:support-v4:${SUPPORT_LIBS_VERSION}"
    implementation "com.android.support:support-dynamic-animation:${SUPPORT_LIBS_VERSION}"
    implementation "com.android.support:recyclerview-v7:${SUPPORT_LIBS_VERSION}"
    implementation 'com.google.protobuf.nano:protobuf-javanano:3.0.0-alpha-7'

    quickstepImplementation fileTree(dir: "quickstep/libs", include: 'sysui_shared.jar')

    testImplementation 'junit:junit:4.12'
    androidTestImplementation "org.mockito:mockito-core:1.9.5"
    androidTestImplementation 'com.google.dexmaker:dexmaker:1.2'
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestImplementation 'com.android.support.test:runner:1.0.0'
    androidTestImplementation 'com.android.support.test:rules:1.0.0'
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'
    androidTestImplementation "com.android.support:support-annotations:${SUPPORT_LIBS_VERSION}"

    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation(name: 'aiotsdk-1.3.0-1911201415', ext: 'aar')
    implementation(name: 'ccos-ui-release', ext: 'aar')
    implementation(name: 'ccos-framework-release', ext: 'aar')
    implementation(name: 'ccos-appcore-release', ext: 'aar')
    implementation(name: 'log-release', ext: 'aar')
    //implementation(name: 'service-release', ext: 'aar')
    //implementation 'com.android.support:support-v4:28.0.0'
    implementation 'org.greenrobot:eventbus:3.0.0'
    implementation 'com.alibaba:fastjson:1.2.32'
    implementation 'com.squareup.okhttp3:okhttp:3.6.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.6.0'
    implementation 'com.squareup.retrofit2:retrofit:2.1.0'
    implementation 'org.ligboy.retrofit2:converter-fastjson-android:2.1.0'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jre7:1.1.3-2'

    implementation 'com.github.heremaps:oksse:0.9.0'
    implementation 'tv.danmaku.ijk.media:ijkplayer-java:0.8.8'
    implementation 'tv.danmaku.ijk.media:ijkplayer-exo:0.8.8'
    //implementation 'com.android.support:recyclerview-v7:28.0.0'
    //implementation 'org.jetbrains.anko:anko:0.10.1'
}

def getSelfDefinedVersion(type) {
    int aa = 1
    int bb = 0
    Process process = "git rev-list --count HEAD".execute()
    process.waitFor()
    int cccc = process.getText().toInteger()

    if ("code".equals(type)) {
        aa * 1000000 + bb * 10000 + cccc
    } else if ("name".equals(type)) {
        String today = new Date().format("yyyyMMddhhmm")
        process = "git describe --always".execute()
        process.waitFor()
        String sha1 = process.getText().trim()
        "$aa.$bb.$cccc.$today"
        /*"$aa.$bb.$cccc.$today.$sha1"*/
    }
}

protobuf {
    // Configure the protoc executable
    protoc {
        artifact = 'com.google.protobuf:protoc:3.0.0-alpha-3'

        generateProtoTasks {
            all().each { task ->
                task.builtins {
                    remove java
                    javanano {
                        option "java_package=launcher_log_extension.proto|com.android.launcher3.userevent.nano"
                        option "java_package=launcher_log.proto|com.android.launcher3.userevent.nano"
                        option "java_package=launcher_dump.proto|com.android.launcher3.model.nano"
                        option "enum_style=java"
                    }
                }
            }
        }
    }
}
